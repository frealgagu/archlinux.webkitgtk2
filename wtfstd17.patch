diff --git a/Source/WTF/wtf/StdLibExtras.h b/Source/WTF/wtf/StdLibExtras.h
index 2e35031..8f4608b 100644
--- a/Source/WTF/wtf/StdLibExtras.h
+++ b/Source/WTF/wtf/StdLibExtras.h
@@ -336,7 +336,7 @@ template<class T> struct _Unique_if<T[]> {
 template<class T, size_t N> struct _Unique_if<T[N]> {
     typedef void _Known_bound;
 };
-
+/*
 template<class T, class... Args> inline typename _Unique_if<T>::_Single_object
 make_unique(Args&&... args)
 {
@@ -349,7 +349,7 @@ make_unique(size_t n)
     typedef typename remove_extent<T>::type U;
     return unique_ptr<T>(new U[n]());
 }
-
+*/
 template<class T, class... Args> typename _Unique_if<T>::_Known_bound
 make_unique(Args&&...) = delete;
 #endif
@@ -357,9 +357,11 @@ make_unique(Args&&...) = delete;
 // Compile-time integer sequences
 // http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3658.html
 // (Note that we only implement index_sequence, and not the more generic integer_sequence).
+/*
 template<size_t... indexes> struct index_sequence {
     static size_t size() { return sizeof...(indexes); }
 };
+*/
 
 template<size_t currentIndex, size_t...indexes> struct make_index_sequence_helper;
 
@@ -370,9 +372,9 @@ template<size_t...indexes> struct make_index_sequence_helper<0, indexes...> {
 template<size_t currentIndex, size_t...indexes> struct make_index_sequence_helper {
     typedef typename make_index_sequence_helper<currentIndex - 1, currentIndex - 1, indexes...>::type type;
 };
-
+/*
 template<size_t length> struct make_index_sequence : public make_index_sequence_helper<length>::type { };
-
+*/
 #if COMPILER_SUPPORTS(CXX_USER_LITERALS)
 // These literals are available in C++14, so once we require C++14 compilers we can get rid of them here.
 // (User-literals need to have a leading underscore so we add it here - the "real" literals don't have underscores).
